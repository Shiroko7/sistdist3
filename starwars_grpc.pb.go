// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package starwars

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	ReportFulcrum(ctx context.Context, in *None, opts ...grpc.CallOption) (*Reply, error)
	GiveCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error)
	RequestRebels(ctx context.Context, in *RequestRebel, opts ...grpc.CallOption) (*Reply, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) ReportFulcrum(ctx context.Context, in *None, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/starwars.Broker/ReportFulcrum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) GiveCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/starwars.Broker/GiveCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) RequestRebels(ctx context.Context, in *RequestRebel, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/starwars.Broker/RequestRebels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	ReportFulcrum(context.Context, *None) (*Reply, error)
	GiveCommand(context.Context, *Command) (*Reply, error)
	RequestRebels(context.Context, *RequestRebel) (*Reply, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (UnimplementedBrokerServer) ReportFulcrum(context.Context, *None) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportFulcrum not implemented")
}
func (UnimplementedBrokerServer) GiveCommand(context.Context, *Command) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveCommand not implemented")
}
func (UnimplementedBrokerServer) RequestRebels(context.Context, *RequestRebel) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRebels not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_ReportFulcrum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).ReportFulcrum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.Broker/ReportFulcrum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).ReportFulcrum(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_GiveCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GiveCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.Broker/GiveCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GiveCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_RequestRebels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRebel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).RequestRebels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.Broker/RequestRebels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).RequestRebels(ctx, req.(*RequestRebel))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "starwars.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportFulcrum",
			Handler:    _Broker_ReportFulcrum_Handler,
		},
		{
			MethodName: "GiveCommand",
			Handler:    _Broker_GiveCommand_Handler,
		},
		{
			MethodName: "RequestRebels",
			Handler:    _Broker_RequestRebels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "starwars.proto",
}

// FulcrumClient is the client API for Fulcrum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FulcrumClient interface {
	AddCity(ctx context.Context, in *Register, opts ...grpc.CallOption) (*Reply, error)
	UpdateName(ctx context.Context, in *Register, opts ...grpc.CallOption) (*Reply, error)
	UpdateNumber(ctx context.Context, in *Register, opts ...grpc.CallOption) (*Reply, error)
	DeleteCity(ctx context.Context, in *Register, opts ...grpc.CallOption) (*Reply, error)
	RequestRebels(ctx context.Context, in *RequestRebel, opts ...grpc.CallOption) (*Reply, error)
}

type fulcrumClient struct {
	cc grpc.ClientConnInterface
}

func NewFulcrumClient(cc grpc.ClientConnInterface) FulcrumClient {
	return &fulcrumClient{cc}
}

func (c *fulcrumClient) AddCity(ctx context.Context, in *Register, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/starwars.Fulcrum/AddCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) UpdateName(ctx context.Context, in *Register, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/starwars.Fulcrum/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) UpdateNumber(ctx context.Context, in *Register, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/starwars.Fulcrum/UpdateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) DeleteCity(ctx context.Context, in *Register, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/starwars.Fulcrum/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) RequestRebels(ctx context.Context, in *RequestRebel, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/starwars.Fulcrum/RequestRebels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulcrumServer is the server API for Fulcrum service.
// All implementations must embed UnimplementedFulcrumServer
// for forward compatibility
type FulcrumServer interface {
	AddCity(context.Context, *Register) (*Reply, error)
	UpdateName(context.Context, *Register) (*Reply, error)
	UpdateNumber(context.Context, *Register) (*Reply, error)
	DeleteCity(context.Context, *Register) (*Reply, error)
	RequestRebels(context.Context, *RequestRebel) (*Reply, error)
	mustEmbedUnimplementedFulcrumServer()
}

// UnimplementedFulcrumServer must be embedded to have forward compatible implementations.
type UnimplementedFulcrumServer struct {
}

func (UnimplementedFulcrumServer) AddCity(context.Context, *Register) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCity not implemented")
}
func (UnimplementedFulcrumServer) UpdateName(context.Context, *Register) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedFulcrumServer) UpdateNumber(context.Context, *Register) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumber not implemented")
}
func (UnimplementedFulcrumServer) DeleteCity(context.Context, *Register) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedFulcrumServer) RequestRebels(context.Context, *RequestRebel) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRebels not implemented")
}
func (UnimplementedFulcrumServer) mustEmbedUnimplementedFulcrumServer() {}

// UnsafeFulcrumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FulcrumServer will
// result in compilation errors.
type UnsafeFulcrumServer interface {
	mustEmbedUnimplementedFulcrumServer()
}

func RegisterFulcrumServer(s grpc.ServiceRegistrar, srv FulcrumServer) {
	s.RegisterService(&Fulcrum_ServiceDesc, srv)
}

func _Fulcrum_AddCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).AddCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.Fulcrum/AddCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).AddCity(ctx, req.(*Register))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.Fulcrum/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).UpdateName(ctx, req.(*Register))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_UpdateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).UpdateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.Fulcrum/UpdateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).UpdateNumber(ctx, req.(*Register))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.Fulcrum/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).DeleteCity(ctx, req.(*Register))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_RequestRebels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRebel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).RequestRebels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.Fulcrum/RequestRebels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).RequestRebels(ctx, req.(*RequestRebel))
	}
	return interceptor(ctx, in, info, handler)
}

// Fulcrum_ServiceDesc is the grpc.ServiceDesc for Fulcrum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fulcrum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "starwars.Fulcrum",
	HandlerType: (*FulcrumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCity",
			Handler:    _Fulcrum_AddCity_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _Fulcrum_UpdateName_Handler,
		},
		{
			MethodName: "UpdateNumber",
			Handler:    _Fulcrum_UpdateNumber_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _Fulcrum_DeleteCity_Handler,
		},
		{
			MethodName: "RequestRebels",
			Handler:    _Fulcrum_RequestRebels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "starwars.proto",
}
